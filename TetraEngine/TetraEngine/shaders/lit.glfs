#version 330 core

struct Material{
	vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float smoothness;
};

in vec3 pos;
in vec3 normal;
in vec2 texCoord;

out vec4 FragColor;

uniform Material surface = Material(vec3(1,1,1),vec3(1,1,1),vec3(1,1,1),16);
uniform bool useTexture = false;
uniform sampler2D texture1;
uniform vec3 viewPos = vec3(0,0,0);
uniform vec3 lightPos = vec3(0,0,0);

void main()
{
	float ambient = 0.1;
	float diffuse = 1;
	float specular = 0;
	
	vec3 lightDir = normalize(lightPos - pos);
	vec3 reflectDir = reflect(-lightDir,normal);
	vec3 viewDir = normalize(viewPos-pos);

	float diffuseFac = max(dot(normal,lightDir),0.0);
	float specularFac = pow(max(dot(viewDir, reflectDir),0.0),surface.smoothness);
	
	vec4 color = 	vec4(surface.ambient, 1) * ambient + 
					vec4(surface.diffuse, 1) * diffuseFac * diffuse + 
					vec4(surface.specular, 1) * specularFac * specular;
	if (useTexture) color = texture(texture1, texCoord) * color;
	FragColor = color;
} 